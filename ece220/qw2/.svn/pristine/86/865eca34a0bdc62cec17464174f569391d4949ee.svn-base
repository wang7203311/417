#include <stdlib.h>
#include <string.h>

#include "mp8.h"


/*
 * basicRecurse -- flood fill recursively from a point until reaching
 *                 black or the image border
 * INPUTS: width -- width of the input image
 *         height -- height of the input image
 *         inRed -- pointer to the input red channel (1-D array)
 *         inGreen -- pointer to the input green channel (1-D array)
 *         inBlue -- pointer to the input blue channel (1-D array)
 *         x -- current x position of the flood
 *         y -- current y position of the flood
 *         marking -- array used to mark seen positions (indexed
 *                    in the same way as the RGB input arrays)
 * OUTPUTS: marking -- marked with flooded pixels
 * RETURN VALUE: none
 * SIDE EFFECTS: none
 */
void 
basicRecurse (int32_t width, int32_t height,
	      const uint8_t* inRed, const uint8_t* inGreen, 
	      const uint8_t* inBlue, 
	      int32_t x, int32_t y, 
	      uint8_t* marking)
{
    int32_t off = y * width + x;
    int32_t p;

    marking[off] = 1;

    // stop at pure black

    // Check upward.
    p = off - width;
    if (0 < y && 0 == marking[p] &&
        0 < inRed[p] + inGreen[p] + inBlue[p]) {
        basicRecurse (width, height, inRed, inGreen, inBlue, 
		      x, y - 1, marking);
    }

    // Check right.
    p = off + 1;
    if (width - 1 > x && 0 == marking[p] &&
        0 < inRed[p] + inGreen[p] + inBlue[p]) {
        basicRecurse (width, height, inRed, inGreen, inBlue, 
		      x + 1, y, marking);
    }

    // Check downward.
    p = off + width;
    if (height - 1 > y && 0 == marking[p] &&
        0 < inRed[p] + inGreen[p] + inBlue[p]) {
        basicRecurse (width, height, inRed, inGreen, inBlue, 
		      x, y + 1, marking);
    }

    // Check left.
    p = off - 1;
    if (0 < x && 0 == marking[p] &&
        0 < inRed[p] + inGreen[p] + inBlue[p]) {
        basicRecurse (width, height, inRed, inGreen, inBlue, 
		      x - 1, y, marking);
    }
}


/*
 * greyRecurse -- flood fill recursively from a point until reaching
 *                near-black pixels or the image border
 * INPUTS: width -- width of the input image
 *         height -- height of the input image
 *         inRed -- pointer to the input red channel (1-D array)
 *         inGreen -- pointer to the input green channel (1-D array)
 *         inBlue -- pointer to the input blue channel (1-D array)
 *         x -- current x position of the flood
 *         y -- current y position of the flood
 *         distSq -- maximum distance squared between black and boundary
 *                   pixel color
 *         marking -- array used to mark seen positions (indexed
 *                    in the same way as the RGB input arrays)
 * OUTPUTS: marking -- marked with flooded pixels
 * RETURN VALUE: none
 * SIDE EFFECTS: none
 */
void 
greyRecurse (int32_t width, int32_t height,
	     const uint8_t* inRed, const uint8_t* inGreen, 
	     const uint8_t* inBlue, 
	     int32_t x, int32_t y, uint32_t distSq, 
	     uint8_t* marking)
{
    int32_t off = y * width + x;
    int32_t p;

    marking[off] = 1;

    // Check upward.
    p = off - width;
    if (0 < y && 0 == marking[p] &&
	!colorsWithinDistSq (inRed[p], inGreen[p], inBlue[p], 
			     0, 0, 0, distSq)) {
        greyRecurse (width, height, inRed, inGreen, inBlue, 
		     x, y - 1, distSq, marking);
    }

    // Check right.
    p = off + 1;
    if (width - 1 > x && 0 == marking[p] &&
	!colorsWithinDistSq (inRed[p], inGreen[p], inBlue[p], 
			     0, 0, 0, distSq)) {
        greyRecurse (width, height, inRed, inGreen, inBlue, 
		     x + 1, y, distSq, marking);
    }

    // Check downward.
    p = off + width;
    if (height - 1 > y && 0 == marking[p] &&
	!colorsWithinDistSq (inRed[p], inGreen[p], inBlue[p], 
			     0, 0, 0, distSq)) {
        greyRecurse (width, height, inRed, inGreen, inBlue, 
		     x, y + 1, distSq, marking);
    }

    // Check left.
    p = off - 1;
    if (0 < x && 0 == marking[p] &&
	!colorsWithinDistSq (inRed[p], inGreen[p], inBlue[p], 
			     0, 0, 0, distSq)) {
        greyRecurse (width, height, inRed, inGreen, inBlue, 
		     x - 1, y, distSq, marking);
    }
}


/*
 * limitedRecurse -- flood fill recursively from a point until reaching
 *                   pixels too different (in RGB color) from the color at
 *                   the flood start point, too far away (> 40 pixels), or
 *                   beyond the image border
 * INPUTS: width -- width of the input image
 *         height -- height of the input image
 *         inRed -- pointer to the input red channel (1-D array)
 *         inGreen -- pointer to the input green channel (1-D array)
 *         inBlue -- pointer to the input blue channel (1-D array)
 *         origX -- starting x position of the flood
 *         origY -- starting y position of the flood
 *         x -- current x position of the flood
 *         y -- current y position of the flood
 *         distSq -- maximum distance squared between pixel at origin 
 *                   and boundary pixel color
 *         marking -- array used to mark seen positions (indexed
 *                    in the same way as the RGB input arrays)
 * OUTPUTS: marking -- marked with flooded pixels
 * RETURN VALUE: none
 * SIDE EFFECTS: none
 */
void 
limitedRecurse (int32_t width, int32_t height,
	        const uint8_t* inRed, const uint8_t* inGreen, 
	        const uint8_t* inBlue, 
	        int32_t origX, int32_t origY, int32_t x, int32_t y, 
		uint32_t distSq, uint8_t* marking)
{
    int32_t dx = x - origX;
    int32_t dy = y - origY;
    int32_t b = origY * width + origX;
    int32_t off = y * width + x;
    int32_t p;

    if (1600 < dx * dx + dy * dy) { return; }

    marking[off] = 1;

    // Check upward.
    p = off - width;
    if (0 < y && 0 == marking[p] &&
	colorsWithinDistSq (inRed[p], inGreen[p], inBlue[p], 
			    inRed[b], inGreen[b], inBlue[b], distSq)) {
        limitedRecurse (width, height, inRed, inGreen, inBlue, 
		        origX, origY, x, y - 1, distSq, marking);
    }

    // Check right.
    p = off + 1;
    if (width - 1 > x && 0 == marking[p] &&
	colorsWithinDistSq (inRed[p], inGreen[p], inBlue[p], 
			    inRed[b], inGreen[b], inBlue[b], distSq)) {
        limitedRecurse (width, height, inRed, inGreen, inBlue, 
		        origX, origY, x + 1, y, distSq, marking);
    }

    // Check downward.
    p = off + width;
    if (height - 1 > y && 0 == marking[p] &&
	colorsWithinDistSq (inRed[p], inGreen[p], inBlue[p], 
			    inRed[b], inGreen[b], inBlue[b], distSq)) {
        limitedRecurse (width, height, inRed, inGreen, inBlue, 
		        origX, origY, x, y + 1, distSq, marking);
    }

    // Check left.
    p = off - 1;
    if (0 < x && 0 == marking[p] &&
	colorsWithinDistSq (inRed[p], inGreen[p], inBlue[p], 
			    inRed[b], inGreen[b], inBlue[b], distSq)) {
        limitedRecurse (width, height, inRed, inGreen, inBlue, 
		        origX, origY, x - 1, y, distSq, marking);
    }
}

