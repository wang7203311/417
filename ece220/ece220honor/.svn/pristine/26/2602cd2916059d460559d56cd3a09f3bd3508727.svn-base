#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include "mp5.h"
#include "mp9.h"

#define MY_INFINITY   1000000000

void
/*check the region one by one, if it is posible that the locale in that region
we do the recursion to check the children. if we find the leaf node, we put in to set
and return.*/
find_nodes (locale_t* loc, vertex_set_t* vs, pyr_tree_t* p, int32_t nnum)
{
    // Do not modify the following line nor add anything above in the function.
    record_fn_call ();
    static int c = 0; //temperary variable
    vs->count = c; //the number of node we find;
    if(vs->count == MAX_IN_VERTEX_SET) //check if we reach the MAX_IN_VERTEX_SET
     {
       return;  //IF YES,we return
     }
     //check if it is possible that the locale stay in the 4n+1 region
    if((p-> node)[nnum].x >= (loc->x) - (loc->range) &&
    (p-> node)[nnum].y_left >= (loc->y) - (loc->range))
    {
      find_nodes(loc, vs, p, 4*nnum+1); //if yes, we do recursion;
    }
    //check if it is possible that the locale stay in the 4n+2 region
    if((p-> node)[nnum].x <= (loc->x) + (loc->range) &&
    (p-> node)[nnum].y_right >= (loc->y) - (loc->range))
    {
      find_nodes(loc, vs, p, 4*nnum+2); //if yes, we do recursion;
    }
    //check if it is possible that the locale stay in the 4n+3 region
    if((p-> node)[nnum].x >= (loc->x) - (loc->range) &&
    (p-> node)[nnum].y_left >= (loc->y) + (loc->range))
    {
      find_nodes(loc, vs, p, 4*nnum+3);//if yes, we do recursion
    }
    //check if it is possible that the locale stay in the 4n+4 region
    if((p-> node)[nnum].x <= (loc->x) + (loc->range) &&
    (p-> node)[nnum].y_right <= (loc->y) + (loc->range))
    {
      find_nodes(loc, vs, p, 4*nnum+4); //if yes, we do recursion
    }
    //check if it is leaf node
      if((4*nnum +1) > p->n_nodes)
    {
      if(1 == in_range(loc, (p-> node)[nnum].x, (p-> node)[nnum].y_left))//check if it is in range
      {
      vs->id[vs->count] = (p->node)[nnum].id; //if in range, put it in the set
      c++; //increament the thing we find
      }
      return;
    }
}
/*check the index in vertex_set, use in_range function to check if it is in in_range
if not, we pop it out the set*/
void
trim_nodes (graph_t* g, vertex_set_t* vs, locale_t* loc)
{
    int i;  //temperary variable
    int j;  //temperary variable
    int index; //index
    for(i = 0; i< MAX_IN_VERTEX_SET && i< vs->count; i++) //loop end until we check all element
      {
        index = (vs-> id)[i]; //the index of the vertex
        //if not in range
        if(1 != in_range(loc,(g-> vertex)[index].x,(g-> vertex)[index].y))
          {
            (vs->count)--; //decrement the thing we find
            //left shift the remain element
            for(j = i; j< vs->count; j++)
            {
              vs->id[i] = vs->id[i+1];
            }
              vs->id[vs->count] = 0; //set the last element in previous array be 0
          }
      }
}
//heap help function
//swap two number in array
void swap(int * a, int* b){
  int t = *a; //t is what a point to
  *a = *b;  //a point to what b points
  *b = t;   //b point to t
}
//heapify function, rerange in decreasing order
//compare two element with their parents, it it greater than parents, swap two
void heapify(int* arr, int n, int i, int* h_id)
{
    int largest = i;  // intialize largest as root
    int l = 2*i + 1;  // left child index, left = 2*i + 1
    int r = 2*i + 2;  // right child index,  = 2*i + 2
    // If left child is larger than root
    if (l < n && arr[l] > arr[largest])
        largest = l; // largest value is left child
    // If right child is larger than largest so far
    if (r < n && arr[r] > arr[largest])
        largest = r; //largest value is right child
    // If largest is not root
    if (largest != i)
    {
        swap(&arr[i], &arr[largest]); //swap the two distance value in heap
        swap(&h_id[i], &h_id[largest]); //swap the corresponding index in h_id
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest, h_id);
    }
}
//make a min heap
void minheap(int* arr, int n, int* h_id)
{
    // build heap
    int i; //current node
    for (i = n/2 - 1; i >= 0; i--)
        {
          heapify(arr, n, i, h_id);
        }
    // One by one extract an element from heap
    for (i=n-1; i>=0; i--)
    {
        // Move current root to end
        swap(&arr[0], &arr[i]); //swap two distance from heap
        swap(&h_id[0], &h_id[i]);//swap corresponding index in h_id
        // call heapify function
        heapify(arr, i, 0, h_id);
    }
}
/*first set all distance in source locale as 0, check their neighbor and put distance
in to heap and make a min heap. pop the smallest element and check next vertex until we find_nodes
next is our destination. put it in path and use their predecessor to fill the array, if reach
MAX_PATH_LENGTH, return 0*/
int32_t
dijkstra (graph_t* g, heap_t* h, vertex_set_t* src, vertex_set_t* dest,
          path_t* path)
{
    int i; //temperary variable, use for loop
    int j; //temperary variable, use for loop
    int k; //temperary variable, use for loop
    int index; //index variable
    int new_distance; //new_distance variable
    int old_distance; //old distance variable
    int nei_id; //neighbor's index
    int pre_index; //predecessor's index
    //create an array to store index put in heap
    int *h_id = (int *)malloc((g->n_vertices)*sizeof(int32_t));
    //assign tentative disatance value;
    for(i = 0; i<(g->n_vertices); i++)
    {
      (g->vertex)[i].from_src = MY_INFINITY; //all distance is infinity
    }
    //find the starting point
    for(i = 0; i<src->count;i++)
    {
      index = src->id[i];  //the index of vertex in source locale
      new_distance = (g->vertex)[index].from_src; //new distance
      new_distance = 0; //new distance equal to 0
      (h->elt)[i]= new_distance; //put the distance in to heap
      h_id[i]  = src->id[i];//put id into h_id
       (g->vertex)[index].pred = MY_INFINITY; //set start point no predecessor.
    }
    h->n_elts = src->count; //things in heap equal to things in source locale
    //if the id is MY_INFINITY or I find the destination, we end search
    while(h_id[0] != MY_INFINITY)
    {
      index = *(h_id); //current node's id
    //check the neighbors, if finished that node mark infinity -1
    //put the neiborhood in array
    for(j = 0; j<(g->vertex)[index].n_neighbors;j++)
    {
      if((g->vertex)[index].heap_id == MY_INFINITY -1) //check if it is marked
      {
        break;
      }
      else
      {
      //define the new distance= value of predecessor + distance
       new_distance = (g->vertex)[index].from_src + (g->vertex)[index].distance[j];
       //compare the newly calculated distance to current value
       nei_id = (g->vertex)[index].neighbor[j]; //define neighbor's index
       old_distance = (g->vertex)[nei_id].from_src; // the previous distance value
       //if the old distance greater  than new distance
       if( old_distance> new_distance)
        {
          (g->vertex)[nei_id].from_src = new_distance; //set new distance be the distance from source
          //change the predecessor
          (g->vertex)[nei_id].pred = index;
        }
        (h->elt)[h->n_elts] = (g->vertex)[nei_id].from_src;//push the distance to heap
        *(h_id+(h->n_elts)) = nei_id; //push the index id to h_id heap
        (h->n_elts)++; //increament things in heap
      }
      //create a min-heap
      minheap(h->elt, h->n_elts, h_id);
    }
    (g->vertex)[index].heap_id = MY_INFINITY -1;//mark the current node;
    for(k = 0; k<h->n_elts; k++) //after check all the element and create the min heap.left shift these two array
    {
      h_id[k] = h_id[k+1];
      (h->elt)[k] = (h->elt)[k+1];
    }
     (h->n_elts)--; //decreament the things on heap
     h_id[h->n_elts] = MY_INFINITY; //fill MY_INFINITY to the last element of previous id array

    //check if it is in destination
    for(k=0; k< dest->count; k++)
    {
      if(h_id[0]==dest->id[k]) //check if next is destination
      {
        //we reach the destination
        (g->vertex)[h_id[0]].heap_id = MY_INFINITY -2; //if it is destination
        break;
      }
    }
    if((g->vertex)[h_id[0]].heap_id == MY_INFINITY -2) //mark as we already deal with that index
    {
      //put to path
      (path->n_vertices) =0; //no thing on path
      path->id[0] = h_id[0]; //put element in  path
      path->tot_dist = (g->vertex)[h_id[0]].from_src; //put total distance
      path->n_vertices ++; //increament the things on path
      while(path->n_vertices < MAX_PATH_LENGTH)
      {
        pre_index = (g->vertex)[h_id[(path->n_vertices)-1]].pred; //define predecessor's index
        if(pre_index == MY_INFINITY) // check if it is starting point
        {
          free(h_id); //free the heap and return
          return 1;
        }
        path->id[(path->n_vertices)] = pre_index; //put his predecessor's index on path
        (path->n_vertices)++; //increament things on path
      }
    free(h_id);//free the heap
    return 0; //return if it greater than the MAX_PATH_LENGTH
    }
  }
    free(h_id); //free the heap
    return 0; //return fail because we check all point
}
