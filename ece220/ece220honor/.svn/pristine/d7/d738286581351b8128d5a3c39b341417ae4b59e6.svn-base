#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include "mp5.h"
#include "mp9.h"

#define MY_INFINITY   1000000000



void
find_nodes (locale_t* loc, vertex_set_t* vs, pyr_tree_t* p, int32_t nnum)
{
    // Do not modify the following line nor add anything above in the function.
    record_fn_call ();
    //if(!nnum) vs->count = 0;
    static int c = 0;
    vs->count = c;
    if(vs->count == MAX_IN_VERTEX_SET)
     {
       return;
     }
    if((p-> node)[nnum].x >= (loc->x) - (loc->range) &&
    (p-> node)[nnum].y_left >= (loc->y) - (loc->range))
    {
      find_nodes(loc, vs, p, 4*nnum+1);
    }
    if((p-> node)[nnum].x <= (loc->x) + (loc->range) &&
    (p-> node)[nnum].y_right >= (loc->y) - (loc->range))
    {
      find_nodes(loc, vs, p, 4*nnum+2);
    }
    if((p-> node)[nnum].x >= (loc->x) - (loc->range) &&
    (p-> node)[nnum].y_left >= (loc->y) + (loc->range))
    {
      find_nodes(loc, vs, p, 4*nnum+3);
    }
    if((p-> node)[nnum].x <= (loc->x) + (loc->range) &&
    (p-> node)[nnum].y_right <= (loc->y) + (loc->range))
    {
      printf("%d\n", nnum);
      find_nodes(loc, vs, p, 4*nnum+4);
    }
      if((4*nnum +1) > p->n_nodes)
    {
      printf("kkkkk\n");
      if(1 == in_range(loc, (p-> node)[nnum].x, (p-> node)[nnum].y_left))
      {
      vs->id[vs->count] = (p->node)[nnum].id;
      c++;
      }
      return;
    }
}
void
trim_nodes (graph_t* g, vertex_set_t* vs, locale_t* loc)
{
    int i;
    int j;
    int index;
    for(i = 0; i< MAX_IN_VERTEX_SET && i< vs->count; i++)
      {
        index = (vs-> id)[i];
        //if not in range
        if(1 != in_range(loc,(g-> vertex)[index].x,(g-> vertex)[index].y))
          {
            (vs->count)--;
            for(j = i; j< vs->count; j++)
            {
              vs->id[i] = vs->id[i+1];
            }
              vs->id[vs->count] = 0;
          }
      }
}

void swap(int * a, int* b){
  int t = *a;
  *a = *b;
  *b = t;
}
void heapify(int* arr, int n, int i, int* h_id)
{
    int largest = i;  // Initialize largest as root
    int l = 2*i + 1;  // left = 2*i + 1
    int r = 2*i + 2;  // right = 2*i + 2
    // If left child is larger than root
    if (l < n && arr[l] > arr[largest])
        largest = l;
    // If right child is larger than largest so far
    if (r < n && arr[r] > arr[largest])
        largest = r;
    // If largest is not root
    if (largest != i)
    {
        swap(&arr[i], &arr[largest]);
        swap(&h_id[i], &h_id[largest]);
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest, h_id);
    }
}
void heapSort(int* arr, int n, int* h_id)
{
    // Build heap (rearrange array)
    int i;
    for (i = n / 2 - 1; i >= 0; i--)
        {
          heapify(arr, n, i, h_id);
        }
    // One by one extract an element from heap
    for (i=n-1; i>=0; i--)
    {
        // Move current root to end
        swap(&arr[0], &arr[i]);
        swap(&h_id[0], &h_id[i]);
        // call max heapify on the reduced heap
        heapify(arr, i, 0, h_id);
    }
}

int32_t
dijkstra (graph_t* g, heap_t* h, vertex_set_t* src, vertex_set_t* dest,
          path_t* path)
{
    int i;
    int j;
    int k;
    int index;
    int new_distance;
    int old_distance;
    int nei_id;
    int pre_index;
    //create an array to store index put in heap
    int *h_id = (int *)malloc((g->n_vertices)*sizeof(int32_t));
    //assign tentative disatance value;
    for(i = 0; i<(g->n_vertices); i++)
    {
      (g->vertex)[i].from_src = MY_INFINITY;
    }
    //find the starting point
    for(i = 0; i<src->count;i++)
    {
      index = src->id[i];
      new_distance = (g->vertex)[index].from_src;
      new_distance = 0;
      (h->elt)[i]= new_distance;
      h_id[i]  = src->id[i];//put id into h_id
       (g->vertex)[index].pred = MY_INFINITY; //set start point no predecessor.
    }
    h->n_elts = src->count;
    //if the id is MY_INFINITY or I find the destination, we end search
    while(h_id[0] != MY_INFINITY)
    {
      index = *(h_id); //current node's id
    //check the neighbors, if finished that node mark infinity -1
    //put the neiborhood in array
    for(j = 0; j<(g->vertex)[index].n_neighbors;j++)
    {
      if((g->vertex)[index].heap_id == MY_INFINITY -1) //check if it is marked
      {
        break;
      }
      else
      {
       new_distance = (g->vertex)[index].from_src + (g->vertex)[index].distance[j];
       //compare the newly calculated distance to current value
       nei_id = (g->vertex)[index].neighbor[j];
       old_distance = (g->vertex)[nei_id].from_src;
       if( old_distance> new_distance)
        {
          (g->vertex)[nei_id].from_src = new_distance;
          //change the predecessor
          (g->vertex)[nei_id].pred = index;
        }
        (h->elt)[h->n_elts] = (g->vertex)[nei_id].from_src;//push the distance to heap
        *(h_id+(h->n_elts)) = nei_id; //push the index id to h_id heap
        (h->n_elts)++;
      }
      //create a min-heap
      heapSort(h->elt, h->n_elts, h_id);
    }
    (g->vertex)[index].heap_id = MY_INFINITY -1;//mark the current node;
    for(k = 0; k<h->n_elts; k++)
    {
      h_id[k] = h_id[k+1];
      (h->elt)[k] = (h->elt)[k+1];
    }
     (h->n_elts)--;
     h_id[h->n_elts] = MY_INFINITY;

    //check if it is in destination
    for(k=0; k< dest->count; k++)
    {
      if(h_id[0]==dest->id[k])
      {
        //we reach the destination
        (g->vertex)[h_id[0]].heap_id = MY_INFINITY -2; //if it is destination
        break;
      }
    }
    if((g->vertex)[h_id[0]].heap_id == MY_INFINITY -2)
    {
      //put to path
      (path->n_vertices) =0;
      path->id[0] = h_id[0];
      path->tot_dist = (g->vertex)[h_id[0]].from_src;
      path->n_vertices ++;
      while(path->n_vertices < MAX_PATH_LENGTH)
      {
        pre_index = (g->vertex)[h_id[(path->n_vertices)-1]].pred;
        if(pre_index == MY_INFINITY)
        {
          free(h_id);
          return 1;
        }
        path->id[(path->n_vertices)] = pre_index;
        (path->n_vertices)++;
      }
    free(h_id);
    return 0;
    }
  }
    free(h_id);
    return 0;
}
